# Sets - Conjuntos em Python (tipo set)
# Conjuntos s√£o ensinados na matem√°tica
# https://brasilescola.uol.com.br/matematica/conjunto.htm
# Representados graficamente pelo diagrama de Venn
# Sets em Python s√£o mut√°veis, por√©m aceitam apenas
# tipos imut√°veis como valor interno.


# Sets s√£o eficientes para remover valores duplicados
# de iter√°veis.
# - N√£o aceitam valores mut√°veis;
# - Seus valores ser√£o sempre √∫nicos;
# - n√£o tem √≠ndexes;
# - n√£o garantem ordem;
# - s√£o iter√°veis (for, in, not in)

# ------------------------------------------------------

# üîπ add(elem)
# Adiciona um √∫nico elemento ao set.
# s = {1, 2}
# s.add(3)
# print(s)  # {1, 2, 3}
# Se o valor j√° existir, ele ignora ‚Äî sem duplicar, sem erro.

# ------------------------------------------------------

# üîπ update(iter√°vel)
# Adiciona v√°rios elementos de uma vez. Aceita listas, tuplas, outros sets, etc.

# ------------------------------------------------------

# s = {1, 2}
# s.update([3, 4], (5, 6), {7})
# print(s)  # {1, 2, 3, 4, 5, 6, 7}
# √â como se fizesse v√°rios add() seguidos.

# ------------------------------------------------------

# üîπ clear()
# Zera o set. Apaga tudo.
# s = {1, 2, 3}
# s.clear()
# print(s)  # set()

# ------------------------------------------------------

# üîπ discard(elem)
# Remove o elemento se existir. Se n√£o existir, ignora (n√£o d√° erro).
# s = {1, 2, 3}
# s.discard(2)   # remove
# s.discard(99)  # n√£o faz nada

# ------------------------------------------------------

# üöÄ Dica ninja:
# Quer tentar remover sem quebrar tudo? Usa discard.
# Quer remover e garantir que o valor est√° l√° mesmo? Usa remove (mas ele explode se o item n√£o existir).

# ------------------------------------------------------

# Criando um set
# set(iter√°vel) ou {1, 2, 3}
# s1 = set('Luiz')
s1 = set()  # vazio
s1 = {'Luiz', 1, 2, 3}  # com dados
s1.discard('Ol√° mundo') # discard diferente do remove n√£o da erro caso n√£o exista o valor em quest√£o no set
s1.discard('Luiz')
# print(s1)

s2 = {2, 3, 4}
s3 = s1 | s2
print(s3)
s3 = s1 & s2
s3 = s2 - s1
s3 = s1 ^ s2
print(s3)